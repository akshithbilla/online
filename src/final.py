# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gFvN_sp53_qpn619X5JkMhGEh5qC-174
"""

pip install transformers torch pandas

pip install transformers datasets torch pandas scikit-learn

!pip install transformers datasets

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# If your dataset is stored in Google Drive
file_path = '/content/drive/MyDrive/merged_amazon_flipkart_rowwise.csv'

# Load the dataset
df = pd.read_csv(file_path)

# Preview the data
df.head()

# Selecting necessary columns for BERT training (text and labels)
df = df[['Name', 'Description', 'Rating']]

# Combining 'Name' and 'Description' to create a single text field
df['text'] = df['Name'] + ". " + df['Description']

# Drop rows where the text is empty or NaN
df.dropna(subset=['text'], inplace=True)

from sklearn.preprocessing import LabelEncoder

# Encoding the rating column
label_encoder = LabelEncoder()
df['Rating'] = label_encoder.fit_transform(df['Rating'].astype(str))

from sklearn.model_selection import train_test_split

# Train-test split
train_texts, val_texts, train_labels, val_labels = train_test_split(df['text'], df['Rating'], test_size=0.2)

from transformers import BertTokenizer

# Load BERT tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Tokenize the input texts
train_encodings = tokenizer(list(train_texts), truncation=True, padding=True, max_length=128)
val_encodings = tokenizer(list(val_texts), truncation=True, padding=True, max_length=128)

import torch

class Dataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Create the dataset
train_dataset = Dataset(train_encodings, list(train_labels))
val_dataset = Dataset(val_encodings, list(val_labels))

import torch
torch.cuda.is_available()

from transformers import BertForSequenceClassification, Trainer, TrainingArguments
# Set device
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
# Load BERT for sequence classification
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(label_encoder.classes_))
model.to(device)  # Move model to the correct device

# Set up training arguments
training_args = TrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=3,              # number of training epochs
    per_device_train_batch_size=16,  # batch size for training
    per_device_eval_batch_size=64,   # batch size for evaluation
    warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.01,               # strength of weight decay
    logging_dir='./logs',            # directory for storing logs
    logging_steps=10,
)

# Initialize the Trainer
trainer = Trainer(
    model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
    args=training_args,                  # training arguments, defined above
    train_dataset=train_dataset,         # training dataset
    eval_dataset=val_dataset             # evaluation dataset
)

# Fine-tune the model
trainer.train()

pip install datasets

pip install --upgrade datasets

!pip install evaluate

import numpy as np
import evaluate

# Load the accuracy metric using evaluate
accuracy_metric = evaluate.load("accuracy")

# Define the compute_metrics function
def compute_metrics(pred):
    labels = pred.label_ids
    preds = np.argmax(pred.predictions, axis=1)  # Get the predictions
    accuracy = accuracy_metric.compute(predictions=preds, references=labels)

    return {
        'accuracy': accuracy['accuracy']
    }

# Pass the compute_metrics function to the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,  # Use validation dataset
    tokenizer=tokenizer,
    compute_metrics=compute_metrics  # Add compute_metrics here
)

# Evaluate the model again
eval_results = trainer.evaluate(eval_dataset=val_dataset)

# Display the evaluation results including accuracy
print(f"Evaluation results: {eval_results}")

# Extract accuracy and loss from the results
accuracy = eval_results.get('eval_accuracy', 'N/A')
loss = eval_results.get('eval_loss', 'N/A')

print(f"Model Accuracy: {accuracy}")
print(f"Model Loss: {loss}")

model.save_pretrained('/content/drive/MyDrive/bert-finetuned-model')
tokenizer.save_pretrained('/content/drive/MyDrive/bert-finetuned-tokenizer')
print(f"Model and tokenizer saved at /content/drive/MyDrive/")

# Save the evaluation results to a JSON file
import json
with open("/content/drive/MyDrive/evaluation_results.json", "w") as f:
    json.dump(eval_results, f)
print("Evaluation results saved to /content/drive/MyDrive/evaluation_results.json")

import pandas as pd

# Load your dataset
file_path = '/mnt/data/merged_amazon_flipkart_rowwise.csv'
df = pd.read_csv('/content/merged_amazon_flipkart_rowwise.csv')

# Check the first few rows and columns of the DataFrame
print(df.head())          # Display the first few rows
print(df.columns.tolist())  # Print the list of column names

eval_results = trainer.evaluate(eval_dataset=test_dataset)
print(f"Evaluation results: {eval_results}")

from google.colab import drive
drive.mount('/content/drive')

from transformers import BertForSequenceClassification, BertTokenizer
import torch

# Set device to GPU if available
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

# Load the fine-tuned model and tokenizer from Google Drive
model = BertForSequenceClassification.from_pretrained('/content/drive/MyDrive/bert-finetuned-model')
tokenizer = BertTokenizer.from_pretrained('/content/drive/MyDrive/bert-finetuned-tokenizer')

# Move model to the appropriate device
model.to(device)

import pandas as pd

# Load the dataset into a pandas dataframe
df = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Check for columns with non-integer data
print(df.dtypes)

# Preview the first few rows to inspect the values
print(df.head())

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/merged_amazon_flipkart_rowwise.csv')

# Convert the 'Rating' column to numeric, forcing errors to NaN
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')

# Replace NaN ratings with a default value, e.g., 0, or you can drop those rows
df['Rating'] = df['Rating'].fillna(0)

# Check the data types again to ensure Rating is now numeric
print(df.dtypes)

# Save the cleaned dataset
df.to_csv('/content/cleaned_dataset.csv', index=False)

# Fill missing descriptions with an empty string (or a placeholder)
df['Description'] = df['Description'].fillna("")

# Save the cleaned dataset again
df.to_csv('/content/cleaned_dataset.csv', index=False)

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive/bert-finetuned-model"

tokenizer_path = "/content/drive/My Drive/bert-finetuned-tokenizer/"

from transformers import AutoTokenizer

# Load the tokenizer from the specified directory
tokenizer = AutoTokenizer.from_pretrained(tokenizer_path)

# Step 4: Load the model
from transformers import AutoModelForSequenceClassification

# Set the model directory path
model_directory = "/content/drive/My Drive/bert-finetuned-model/"  # Same as tokenizer path

# Load the model
model = AutoModelForSequenceClassification.from_pretrained(model_directory, local_files_only=True)

# Load the model configuration and weights
model_path = "/content/drive/My Drive/fine_tuned_model/model.safetensors"
config_path = "/content/drive/My Drive/fine_tuned_model/config.json"

import pandas as pd
import numpy as np

# Load the dataset
file_path = '/content/cleaned_dataset.csv'  # Use your file path
data = pd.read_csv(file_path)

# Fill missing values
data['Retail_price'].fillna(0, inplace=True)  # Replace NaN in price with 0
data['discounted_price'].fillna(data['Retail_price'], inplace=True)  # Fill discounted price with retail price if missing
data['Rating'].fillna(0, inplace=True)  # Fill missing ratings with 0
data['Description'].fillna('', inplace=True)  # Fill missing descriptions with an empty string
data['Brand'].fillna('Unknown', inplace=True)  # Fill missing brand with 'Unknown'

# Handle any additional columns that need cleaning
data.dropna(subset=['Name'], inplace=True)  # Ensure no products with missing names

# Check again for any missing values
print(data.isnull().sum())

# Preview the cleaned data
print(data.head())

print(data.columns)

# Ensure proper data types
data['Retail_price'] = data['Retail_price'].astype(float)
data['discounted_price'] = data['discounted_price'].astype(float)

# Shorten the Category and Name for better processing (optional)
data['Category'] = data['Category'].apply(lambda x: x.split('>>')[-1].strip())
data['Name'] = data['Name'].apply(lambda x: x[:50])  # Limit to first 50 chars for simplicity

from google.colab import drive
drive.mount('/content/drive')

from transformers import AutoTokenizer, AutoModel
import torch

# Load your fine-tuned BERT model and tokenizer
model_path = "/content/drive/MyDrive/bert-finetuned-model"
tokenizer_path = "/content/drive/MyDrive/bert-finetuned-tokenizer"

tokenizer = AutoTokenizer.from_pretrained(tokenizer_path)
model = AutoModel.from_pretrained(model_path)

# Function to extract embeddings from BERT
def get_bert_embeddings(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).numpy()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

# Modify the get_bert_embeddings function to use GPU
def get_bert_embeddings(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512).to(device)
    with torch.no_grad():
        outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).cpu().numpy()  # move back to CPU

# Batch processing function for BERT embeddings
def get_bert_embeddings_batch(texts):
    # Tokenize the batch of texts
    inputs = tokenizer(texts, return_tensors="pt", padding=True, truncation=True, max_length=512).to(device)
    with torch.no_grad():
        outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).cpu().numpy()  # Move back to CPU

batch_size = 5  # You can adjust this based on your GPU memory
bert_embeddings_list = []

for i in range(0, len(data), batch_size):
    batch = data['Description'].iloc[i:i + batch_size].tolist()
    embeddings_batch = get_bert_embeddings_batch(batch)
    bert_embeddings_list.append(embeddings_batch)

# Concatenate all the embeddings into a single array
embeddings = np.vstack(bert_embeddings_list)

from sklearn.metrics.pairwise import cosine_similarity

def recommend_similar_products_bert(product_name, top_n=10, threshold=0.7):
    # Find the index of the given product
    if product_name not in data['Name'].values:
        print(f"Product '{product_name}' not found in the dataset.")
        return pd.DataFrame()

    product_idx = data[data['Name'] == product_name].index[0]

    # Compute cosine similarity
    cosine_similarities = cosine_similarity([embeddings[product_idx]], embeddings)[0]

    # Get the top N similar products (excluding the input product)
    similar_product_indices = cosine_similarities.argsort()[-top_n-1:-1][::-1]

    # Fetch the similar products
    similar_products = data.iloc[similar_product_indices][['Name', 'Brand', 'Category', 'Description']]

    # Filter based on the threshold
    similar_products = similar_products[cosine_similarities[similar_product_indices] > threshold]

    # Remove duplicates
    similar_products = similar_products.drop_duplicates(subset='Name').reset_index(drop=True)

    return similar_products

# Example usage
product_name = "Alisha Solid Women's Cycling Shorts"
similar_products = recommend_similar_products_bert(product_name)
print(similar_products)

# Example usage with different product names
test_products = [
    "Alisha Solid Women's Cycling Shorts",
    "Shaun Printed Baby Boy's Yellow, Grey, Black T-Shirt",
    "Vishudh Printed Women's Straight Kurta"
]

for product_name in test_products:
    similar_products = recommend_similar_products_bert(product_name)
    print(f"\nRecommendations for '{product_name}':")
    print(similar_products)

# COLLABORATIVE FILTERING RECOMMENDATIONS
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
data = pd.read_csv('/content/cleaned_dataset.csv')
# Function that recommends items using collaborative filtering
def collaborative_filtering_recommendations(data, target_user_id, top_n=10):
    # Create the user-item matrix
    user_item_matrix = data.pivot_table(index='ID', columns='pid', values='Rating', aggfunc='mean').fillna(0)

    # Calculate the user similarity matrix using cosine similarity
    user_similarity = cosine_similarity(user_item_matrix)

    # Find the index of the target user in the matrix
    target_user_index = user_item_matrix.index.get_loc(target_user_id)

    # Get the similarity scores for the target user
    user_similarities = user_similarity[target_user_index]

    # Sort the users by similarity in descending order (excluding the target user)
    similar_users_indices = user_similarities.argsort()[::-1][1:]

    # Generate recommendations based on similar users
    recommended_items = []

    for user_index in similar_users_indices:
        # Get items rated by the similar user but not by the target user
        rated_by_similar_user = user_item_matrix.iloc[user_index]
        not_rated_by_target_user = (rated_by_similar_user == 0) & (user_item_matrix.iloc[target_user_index] == 0)

        # Extract the item IDs of recommended items
        recommended_items.extend(user_item_matrix.columns[not_rated_by_target_user][:top_n])

    # Get the details of recommended items
    recommended_items_details = data[data['pid'].isin(recommended_items)][['Name', 'Brand', 'Category', 'Image', 'Rating']]

    return recommended_items_details.head(top_n)

    # Example usage
target_user_id = 4  # Replace with an actual user ID from your dataset
top_n = 5
collaborative_filtering_rec = collaborative_filtering_recommendations(data, target_user_id, top_n)
print(f"Top {top_n} recommendations for User {target_user_id}:")
print(collaborative_filtering_rec)

import pandas as pd

# Load the dataset
data = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Function to check if the product name exists in the dataset
def check_product_name_existence(data, product_name):
    if product_name not in data['Name'].unique():
        raise ValueError(f"Product name '{product_name}' not found in the dataset.")
    return True

# Function to retrieve product details based on product name
def get_product_description(data, product_name):
    # Check if the product name exists in the dataset
    check_product_name_existence(data, product_name)

    # Get the product details (assuming the dataset has columns 'Name' and 'Description')
    product_details = data[data['Name'] == product_name][['Name', 'Description']].drop_duplicates()

    return product_details

# Input from the user (product name)
product_name = input("Enter the product name: ").strip()

try:
    # Fetch the product description
    product_details = get_product_description(data, product_name)
    print(f"Details of the product '{product_name}':")
    print(product_details)
except ValueError as e:
    print(e)

import pandas as pd

# Load the dataset
df = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Handle missing values in 'Description'
df['Description'] = df['Description'].fillna('')

# Ensure the 'Rating' column is numeric and handle missing values
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce').fillna(0)

# Function to get products based on a specific name, sorted by rating
def get_products_by_name(product_name, n_recommendations=10):
    # Filter products whose names contain the product name (case insensitive)
    filtered_products = df[df['Name'].str.contains(product_name, case=False, na=False)]

    # Sort the filtered products by Rating in descending order
    filtered_products = filtered_products[['Name', 'Description', 'Image', 'Rating']].sort_values(by='Rating', ascending=False)

    # Limit the results to the top 'n_recommendations'
    return filtered_products.head(n_recommendations)

# Interactive user input
product_name_input = input("Enter the product name: ")  # User inputs product name

# Get products based on the product name search
recommendations = get_products_by_name(product_name_input)

# Display the recommendations
print(f"\nProducts matching '{product_name_input}':\n")4
print(recommendations)

import pandas as pd

# Load the dataset (replace the file path with the actual path to your CSV file)
df = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Handle missing values (same as before)
df['Description'] = df['Description'].fillna('')
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce').fillna(0)

# Ensure the Image column exists and has valid URLs
if 'Image' in df.columns:
    # Proceed with the rest of your operations on df
    print("Dataset loaded successfully")
else:
    print("The 'Image' column is missing in the dataset.")

import pandas as pd

# Load the dataset
df = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Handle missing values in 'Description'
df['Description'] = df['Description'].fillna('')

# Ensure the 'Rating' column is numeric and handle missing values
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce').fillna(0)

# Simple check to filter out invalid image URLs based on common patterns
def is_valid_image_url(url):
    if pd.isna(url) or len(url) < 10:  # Check if URL is missing or too short
        return False
    valid_extensions = ('.jpg', '.jpeg', '.png', '.gif')  # Common image file extensions
    if any(url.lower().endswith(ext) for ext in valid_extensions):
        return True
    return False

# Apply the function to filter URLs that look valid
df['valid_image'] = df['Image'].apply(is_valid_image_url)

# Function to get products based on a specific name and valid image URLs, sorted by rating
def get_products_by_name(product_name, n_recommendations=10):
    # Filter products whose names contain the product name (case insensitive) and have valid image URLs
    filtered_products = df[df['Name'].str.contains(product_name, case=False, na=False)]
    filtered_products = filtered_products[filtered_products['valid_image'] == True]

    # Sort the filtered products by Rating in descending order
    filtered_products = filtered_products[['Name', 'Description', 'Image', 'Rating']].sort_values(by='Rating', ascending=False)

    # Limit the results to the top 'n_recommendations'
    return filtered_products.head(n_recommendations)

# Interactive user input
product_name_input = input("Enter the product name: ")  # Correct the input line

# Get products based on the product name search with valid image URLs
recommendations = get_products_by_name(product_name_input)

# Display the recommendations
print(f"\nProducts matching '{product_name_input}' with valid image URLs:\n")
print(recommendations)

import pandas as pd
import requests
from IPython.display import HTML, display

# URL for the "Image not found" image
image_not_found_url = "<https://oionline.com/wp-content/uploads/2018/03/notfound.jpg>"  # Replace <YOUR_IMAGE_URL> with the URL where your image is hosted

# Load the dataset
df = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Handle missing values in 'Description'
df['Description'] = df['Description'].fillna('')

# Ensure the 'Rating' column is numeric and handle missing values
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce').fillna(0)

# Check if the 'Image' column exists
if 'Image' in df.columns:

    # Function to check if an image URL is valid based on the response
    def is_valid_image_url(url):
        if pd.isna(url) or len(url) < 10:  # Check if URL is missing or too short
            return False
        valid_extensions = ('.jpg', '.jpeg', '.png', '.gif')  # Common image file extensions
        if any(url.lower().endswith(ext) for ext in valid_extensions):
            try:
                response = requests.head(url, timeout=5)
                if response.status_code == 200:
                    return True
            except requests.RequestException:
                return False
        return False

    # Ensure URLs are properly formatted (add http:// if missing)
    def format_image_url(url):
        if pd.isna(url) or len(url) < 10:
            return None
        if not url.startswith(('http://', 'https://')):
            return 'http://' + url
        return url

    df['Image'] = df['Image'].apply(format_image_url)

else:
    print("No 'Image' column found in the dataset.")

# Function to get products based on a specific name, sorted by rating
def get_products_by_name(product_name, n_recommendations=10):
    filtered_products = df[df['Name'].str.contains(product_name, case=False, na=False)]
    filtered_products = filtered_products[['Name', 'Description', 'Image', 'Rating']].sort_values(by='Rating', ascending=False)
    return filtered_products.head(n_recommendations)

# Interactive user input
product_name_input = input("Enter the product name: ")

# Get products based on the product name search
recommendations = get_products_by_name(product_name_input)

# Display the recommendations
if not recommendations.empty:
    print(f"\nProducts matching '{product_name_input}':\n")
    for idx, row in recommendations.iterrows():
        print(f"Product Name: {row['Name']}")
        print(f"Description: {row['Description']}")
        print(f"Rating: {row['Rating']}")

        # Check if the image URL is valid and accessible
        if row['Image'] and is_valid_image_url(row['Image']):
            print(f"Image URL: {row['Image']}")
        else:
            print(f"Image: {image_not_found_url}")

        print("-" * 50)
else:
    print(f"No products found with the name '{product_name_input}'.")

!pip install scikit-surprise

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors
from surprise import Dataset, Reader
from surprise import SVD
from surprise.model_selection import train_test_split
import numpy as np

# Step 1: Content-Based Filtering (using TF-IDF and cosine similarity)
df['Description'] = df['Description'].fillna('')
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce').fillna(0)

# Combine relevant features
df['combined_features'] = df['Name'] + " " + df['Category'] + " " + df['Description']

# Create TF-IDF matrix
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['combined_features'])

# Fit Nearest Neighbors model
nn_model = NearestNeighbors(metric='cosine', algorithm='brute')
nn_model.fit(tfidf_matrix)

def get_content_based_recommendations(product_id, n_recommendations=10):
    idx = df.index[df['ID'] == product_id].tolist()[0]
    distances, indices = nn_model.kneighbors(tfidf_matrix[idx], n_neighbors=n_recommendations + 1)
    return df.iloc[indices[0][1:]][['ID', 'Name', 'Category', 'Rating', 'Description', 'Image']]

# Step 2: Collaborative Filtering (using SVD from the Surprise library)
reader = Reader(rating_scale=(1, 5))
collab_data = df[['ID', 'Rating']].dropna()
collab_data['userId'] = np.random.randint(1, 1000, collab_data.shape[0])
collab_data = collab_data[['userId', 'ID', 'Rating']]

data = Dataset.load_from_df(collab_data[['userId', 'ID', 'Rating']], reader)
trainset, testset = train_test_split(data, test_size=0.2)

svd = SVD()
svd.fit(trainset)

def get_collaborative_recommendations(user_id, n_recommendations=10):
    user_rated_products = collab_data[collab_data['userId'] == user_id]['ID'].tolist()
    all_products = df['ID'].tolist()
    predictions = [svd.predict(user_id, product_id) for product_id in all_products if product_id not in user_rated_products]
    predictions.sort(key=lambda x: x.est, reverse=True)
    top_predictions = predictions[:n_recommendations]
    top_product_ids = [pred.iid for pred in top_predictions]
    return df[df['ID'].isin(top_product_ids)][['ID', 'Name', 'Category', 'Rating', 'Description', 'Image']]

# Step 3: Hybrid Recommendation (combining both)
def hybrid_recommendation_by_name(product_name, user_id, n_recommendations=10):
    # Find the product ID based on the product name
    try:
        product_id = df[df['Name'].str.contains(product_name, case=False, na=False)].iloc[0]['ID']
    except IndexError:
        print(f"Product '{product_name}' not found in the dataset.")
        return pd.DataFrame()  # Return an empty DataFrame if the product is not found

    # Get content-based recommendations
    content_recommendations = get_content_based_recommendations(product_id, n_recommendations)

    # Get collaborative recommendations
    collaborative_recommendations = get_collaborative_recommendations(user_id, n_recommendations)

    # Combine both recommendations (for simplicity, we can take the union or average ranks)
    hybrid_recs = pd.concat([content_recommendations, collaborative_recommendations]).drop_duplicates()

    # Sort by Rating in descending order
    hybrid_recs = hybrid_recs.sort_values(by='Rating', ascending=False)

    # Return top n recommendations
    return hybrid_recs.head(n_recommendations)

# Example usage
product_name = input("Enter the product name: ")  # Take product name as input from the user
user_id = 1  # Sample user

# Get hybrid recommendations based on product name
recommendations = hybrid_recommendation_by_name(product_name, user_id)
print(recommendations)

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors
from surprise import Dataset, Reader
from surprise import SVD
from surprise.model_selection import train_test_split
import numpy as np

# Step 1: Content-Based Filtering (using TF-IDF and cosine similarity)
df['Description'] = df['Description'].fillna('')
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce').fillna(0)

# Combine relevant features
df['combined_features'] = df['Name'] + " " + df['Category'] + " " + df['Description']

# Create TF-IDF matrix
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['combined_features'])

# Fit Nearest Neighbors model
nn_model = NearestNeighbors(metric='cosine', algorithm='brute')
nn_model.fit(tfidf_matrix)

def get_content_based_recommendations(product_id, category, n_recommendations=10):
    idx = df.index[df['ID'] == product_id].tolist()[0]
    distances, indices = nn_model.kneighbors(tfidf_matrix[idx], n_neighbors=n_recommendations + 1)

    # Filter recommendations based on category
    recommendations = df.iloc[indices[0][1:]]
    return recommendations[recommendations['Category'] == category][['ID', 'Name', 'Category', 'Rating', 'Description', 'Image']]

# Step 2: Collaborative Filtering (using SVD from the Surprise library)
reader = Reader(rating_scale=(1, 5))
collab_data = df[['ID', 'Rating']].dropna()
collab_data['userId'] = np.random.randint(1, 1000, collab_data.shape[0])
collab_data = collab_data[['userId', 'ID', 'Rating']]

data = Dataset.load_from_df(collab_data[['userId', 'ID', 'Rating']], reader)
trainset, testset = train_test_split(data, test_size=0.2)

svd = SVD()
svd.fit(trainset)

def get_collaborative_recommendations(user_id, category, n_recommendations=10):
    user_rated_products = collab_data[collab_data['userId'] == user_id]['ID'].tolist()
    all_products = df['ID'].tolist()
    predictions = [svd.predict(user_id, product_id) for product_id in all_products if product_id not in user_rated_products]
    predictions.sort(key=lambda x: x.est, reverse=True)

    top_predictions = predictions[:n_recommendations]
    top_product_ids = [pred.iid for pred in top_predictions]

    # Filter recommendations by category
    recommendations = df[df['ID'].isin(top_product_ids)]
    return recommendations[recommendations['Category'] == category][['ID', 'Name', 'Category', 'Rating', 'Description', 'Image']]

# Step 3: Hybrid Recommendation (combining both)
def hybrid_recommendation_by_name(product_name, user_id, n_recommendations=10):
    # Find the product ID and category based on the product name
    try:
        product_info = df[df['Name'].str.contains(product_name, case=False, na=False)].iloc[0]
        product_id = product_info['ID']
        category = product_info['Category']
    except IndexError:
        print(f"Product '{product_name}' not found in the dataset.")
        return pd.DataFrame()  # Return an empty DataFrame if the product is not found

    # Get content-based recommendations from the same category
    content_recommendations = get_content_based_recommendations(product_id, category, n_recommendations)

    # Get collaborative recommendations from the same category
    collaborative_recommendations = get_collaborative_recommendations(user_id, category, n_recommendations)

    # Combine both recommendations (for simplicity, we can take the union or average ranks)
    hybrid_recs = pd.concat([content_recommendations, collaborative_recommendations]).drop_duplicates()

    # Sort by Rating in descending order
    hybrid_recs = hybrid_recs.sort_values(by='Rating', ascending=False)

    # Return top n recommendations
    return hybrid_recs.head(n_recommendations)

# Example usage
product_name = input("Enter the product name: ")  # Take product name as input from the user
user_id = 1  # Sample user

# Get hybrid recommendations based on product name and category
recommendations = hybrid_recommendation_by_name(product_name, user_id)

# Display recommendations along with clickable image URLs
if not recommendations.empty:
    print(f"\nRecommended products for '{product_name}' in the same category:\n")
    for idx, row in recommendations.iterrows():
        print(f"Product Name: {row['Name']}")
        print(f"Description: {row['Description']}")
        print(f"Rating: {row['Rating']}")

        # Display image link
        if pd.notna(row['Image']):
            print(f"Image URL: {row['Image']}")
        else:
            # Fallback to a default image
            print("Image URL: https://yourserver.com/image_not_found.png")  # Use a hosted 'Image not found' placeholder

        print("-" * 50)  # Separator between products
else:
    print(f"No products found with the name '{product_name}'.")

import pandas as pd
from datetime import datetime

# Load the main product dataset
main_df = pd.read_csv('merged_amazon_flipkart_rowwise.csv')

# Define the path for the user search history dataset
search_history_path = 'user_search_history.csv'

# Check if the search history dataset exists; if not, create an empty DataFrame with columns
try:
    search_history_df = pd.read_csv(search_history_path)
except FileNotFoundError:
    search_history_df = pd.DataFrame(columns=['ProductName', 'FoundInMainDataset', 'Timestamp'])

# Function to get products by name and log the search history
def get_products_by_name(product_name, n_recommendations=10):
    # Filter products in the main dataset matching the search term
    filtered_products = main_df[main_df['Name'].str.contains(product_name, case=False, na=False)]

    # Determine if the product was found
    product_found = not filtered_products.empty

    # If found, sort by rating and limit results
    if product_found:
        filtered_products = filtered_products[['Name', 'Description', 'Image', 'Rating']].sort_values(by='Rating', ascending=False)
        filtered_products = filtered_products.head(n_recommendations)

    # Log the search to the search history dataset
    log_user_search(product_name, product_found)

    # Return the filtered products or a message if none found
    if product_found:
        return filtered_products
    else:
        return f"No products found for '{product_name}'."

# Function to log the user's search into the search history DataFrame
def log_user_search(product_name, product_found):
    # Record the search with the current timestamp
    new_entry = {
        'ProductName': product_name,
        'FoundInMainDataset': product_found,
        'Timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    global search_history_df
    search_history_df = pd.concat([search_history_df, pd.DataFrame([new_entry])], ignore_index=True)

# Example user search
product_name_input = input("Enter the product name: ")
recommendations = get_products_by_name(product_name_input)

# Display recommendations or message if no match
print(f"\nResults for '{product_name_input}':\n")
if isinstance(recommendations, str):  # If no products found
    print(recommendations)
else:
    for idx, row in recommendations.iterrows():
        print(f"Product Name: {row['Name']}")
        print(f"Description: {row['Description']}")
        print(f"Rating: {row['Rating']}")
        print(f"Image URL: {row['Image'] if row['Image'] else 'Sorry! Image not found.'}")
        print("-" * 50)  # Separator

# Save the updated search history to CSV
search_history_df.to_csv(search_history_path, index=False)
print("User search history has been updated and saved to a new dataset.")